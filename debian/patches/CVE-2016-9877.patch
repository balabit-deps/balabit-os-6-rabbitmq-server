From 157948d86d391a325ac9702f78976c175ced58be Mon Sep 17 00:00:00 2001
From: Daniil Fedotov <dfedotov@pivotal.io>
Date: Mon, 5 Sep 2016 12:33:49 +0100
Subject: [PATCH] Auth issue fix 039a3c22e57bf77b325d19494a9b20cd745f1ea7
 backport

---
 src/rabbit_mqtt_processor.erl                 | 63 ++++++++++++++-------------
 test/Makefile                                 |  2 +-
 test/src/com/rabbitmq/mqtt/test/MqttTest.java | 12 +++++
 3 files changed, 45 insertions(+), 32 deletions(-)

diff --git a/plugins-src/rabbitmq-mqtt/src/rabbit_mqtt_processor.erl b/plugins-src/rabbitmq-mqtt/src/rabbit_mqtt_processor.erl
index c84bb4a..83bb8fa 100644
--- a/plugins-src/rabbitmq-mqtt/src/rabbit_mqtt_processor.erl
+++ b/plugins-src/rabbitmq-mqtt/src/rabbit_mqtt_processor.erl
@@ -72,7 +72,13 @@ process_request(?CONNECT,
             _ ->
                 case creds(Username, Password, SSLLoginName) of
                     nocreds ->
-                        rabbit_log:error("MQTT login failed - no credentials~n"),
+                        rabbit_log:error("MQTT login failed: no credentials provided~n"),
+                        {?CONNACK_CREDENTIALS, PState};
+                    {invalid_creds, {undefined, Pass}} when is_list(Pass) ->
+                        rabbit_log:error("MQTT login failed: no user username is provided"),
+                        {?CONNACK_CREDENTIALS, PState};
+                    {invalid_creds, {User, undefined}} when is_list(User) ->
+                        rabbit_log:error("MQTT login failed for ~p: no password provided", [User]),
                         {?CONNACK_CREDENTIALS, PState};
                     {UserBin, PassBin} ->
                         case process_login(UserBin, PassBin, ProtoVersion, PState) of
@@ -373,36 +379,31 @@ creds(User, Pass, SSLLoginName) ->
     DefaultPass   = rabbit_mqtt_util:env(default_pass),
     {ok, Anon}    = application:get_env(?APP, allow_anonymous),
     {ok, TLSAuth} = application:get_env(?APP, ssl_cert_login),
-    U = case {User =/= undefined,
-              is_binary(DefaultUser),
-              Anon =:= true,
-              (TLSAuth andalso SSLLoginName =/= none)} of
-             %% username provided
-             {true,  _,    _,    _}     -> list_to_binary(User);
-             %% anonymous, default user is configured, no TLS
-             {false, true, true, false} -> DefaultUser;
-             %% no username provided, TLS certificate is present,
-             %% rabbitmq_mqtt.ssl_cert_login is true
-             {false, _,    _,    true}  -> SSLLoginName;
-             _                          -> nocreds
-        end,
-    case U of
-        nocreds ->
-            nocreds;
-        _ ->
-            case {Pass =/= undefined,
-                  is_binary(DefaultPass),
-                  Anon =:= true,
-                  TLSAuth} of
-                 %% password provided
-                 {true,  _,    _,    _} -> {U, list_to_binary(Pass)};
-                 %% password not provided, TLS certificate is present,
-                 %% rabbitmq_mqtt.ssl_cert_login is true
-                 {false, _, _, true}    -> {U, none};
-                 %% anonymous, default password is configured
-                 {false, true, true, _} -> {U, DefaultPass};
-                 _                      -> {U, none}
-            end
+    HaveDefaultCreds = Anon =:= true andalso
+                       is_binary(DefaultUser) andalso
+                       is_binary(DefaultPass),
+
+    CredentialsProvided = User =/= undefined orelse
+                          Pass =/= undefined,
+
+    CorrectCredentials = is_list(User) andalso
+                         is_list(Pass),
+
+    SSLLoginProvided = TLSAuth =:= true andalso
+                       SSLLoginName =/= none,
+
+    case {CredentialsProvided, CorrectCredentials, SSLLoginProvided, HaveDefaultCreds} of
+        %% Username and password take priority
+        {true, true, _, _}          -> {list_to_binary(User),
+                                        list_to_binary(Pass)};
+        %% Either username or password is provided
+        {true, false, _, _}         -> {invalid_creds, {User, Pass}};
+        %% rabbitmq_mqtt.ssl_cert_login is true. SSL user name provided.
+        %% Authenticating using username only.
+        {false, false, true, _}     -> {SSLLoginName, none};
+        %% Anonymous connection uses default credentials
+        {false, false, false, true} -> {DefaultUser, DefaultPass};
+        _                           -> nocreds
     end.
 
 supported_subs_qos(?QOS_0) -> ?QOS_0;
diff --git a/plugins-src/rabbitmq-mqtt/test/Makefile b/plugins-src/rabbitmq-mqtt/test/Makefile
index 190e740..9350fc0 100644
--- a/plugins-src/rabbitmq-mqtt/test/Makefile
+++ b/plugins-src/rabbitmq-mqtt/test/Makefile
@@ -1,4 +1,4 @@
-UPSTREAM_GIT=https://git.eclipse.org/gitroot/paho/org.eclipse.paho.mqtt.java.git
+UPSTREAM_GIT=https://github.com/eclipse/paho.mqtt.java.git
 REVISION=00b5b2f99ae8410b7d96d106e080a092c5f92546
 
 JC=javac
diff --git a/plugins-src/rabbitmq-mqtt/test/src/com/rabbitmq/mqtt/test/MqttTest.java b/plugins-src/rabbitmq-mqtt/test/src/com/rabbitmq/mqtt/test/MqttTest.java
index 01f1d07..839726b 100644
--- a/plugins-src/rabbitmq-mqtt/test/src/com/rabbitmq/mqtt/test/MqttTest.java
+++ b/plugins-src/rabbitmq-mqtt/test/src/com/rabbitmq/mqtt/test/MqttTest.java
@@ -222,6 +222,18 @@ public void testInvalidPassword() throws MqttException {
         }
     }
 
+    public void testEmptyPassword() throws MqttException {
+        MqttClient c = new MqttClient(brokerUrl, clientId, null);
+        MqttConnectOptions opts = new MyConnOpts();
+        opts.setUserName("guest");
+        opts.setPassword(null);
+        try {
+            c.connect(opts);
+            fail("Authentication failure expected");
+        } catch (MqttException ex) {
+            Assert.assertEquals(MqttException.REASON_CODE_FAILED_AUTHENTICATION, ex.getReasonCode());
+        }
+    }
 
     public void testSubscribeQos0() throws MqttException, InterruptedException {
         client.connect(conOpt);
